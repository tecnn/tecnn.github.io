<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Cisco系列（一）</title>
    <url>/2021/11/29/Cisco/Cisco%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Cisco</category>
      </categories>
      <tags>
        <tag>Cisco</tag>
        <tag>Vlan</tag>
        <tag>思科</tag>
        <tag>路由器</tag>
        <tag>交换机</tag>
      </tags>
  </entry>
  <entry>
    <title>BookStack</title>
    <url>/2021/11/29/Wiki%20and%20Blog/BookStack/</url>
    <content><![CDATA[<p>BookStack 是基于Mindoc、使用Go语言的Beego框架开发的功能类似GitBook和看云的在线文档管理系统，实现了文档采集、导入、电子书生成以及版本控制等强大的文档功能。</p>
<p>目前只测试了Ubuntu20，其他系统暂时涉及测试</p>
<h3 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h3>]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>博客</tag>
        <tag>文档</tag>
        <tag>BookStack</tag>
      </tags>
  </entry>
  <entry>
    <title>Docsify</title>
    <url>/2021/11/29/Wiki%20and%20Blog/Docsify/</url>
    <content><![CDATA[<p>Docsify 是一个动态生成文档网站的工具。不同于 GitBook、Hexo 的地方是它不会生成将 .md 转成 .html 文件，所有转换工作都是在运行时进行。</p>
<p>这将非常实用，如果只是需要快速的搭建一个小型的文档网站，或者不想因为生成的一堆 .html 文件“污染” commit 记录，只需要创建一个 index.html 就可以开始写文档而且直接部署在 GitHub Pages。</p>
<h3 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h3>]]></content>
      <categories>
        <category>Wiki</category>
      </categories>
      <tags>
        <tag>文档管理</tag>
        <tag>Wiki</tag>
        <tag>Docsify</tag>
      </tags>
  </entry>
  <entry>
    <title>DokuWiki</title>
    <url>/2021/11/29/Wiki%20and%20Blog/DokuWiki/</url>
    <content><![CDATA[<p><em>DOKUWIKI</em>是一个开源WIKI引擎程序,运行于PHP环境下,程序小巧而功能强大、灵活,适合中小团队和个人网站知识库的管理。Dokuwiki作为一个wiki引擎，软件主体十分小巧但功能非常强大而又灵活。它语法简单，为易写性、易读性提供保障。它提供权限管理和安全策略，能够保证信息库的安全性。它又是开源的，这给熟悉PHP的开发者留下了无限的可能。它还有一个十分活跃的社区论坛，在那里能找到很多关于安装和使用的有用信息，另外，非常丰富的扩展插件也诞生于此。如果有兴趣，你也可以注册一个账号，在社区论坛里提出需求和解决别人提出的需求。<br>如果提供一个中小团队或者个人使用，那么Dokuwiki非常合适。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum update -y</span><br><span class="line"></span><br><span class="line">yum upgrade -y</span><br><span class="line"></span><br><span class="line">yum install vim wget -y</span><br><span class="line"></span><br><span class="line">systemctl enable httpd</span><br><span class="line"></span><br><span class="line">systemctl start httpd</span><br><span class="line"></span><br><span class="line">firewall-cmd –add-port=80/tcp –permanent</span><br><span class="line"></span><br><span class="line">firewall-cmd –reload</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class="line"></span><br><span class="line">rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm</span><br><span class="line"></span><br><span class="line">yum install php70w php70w-common php70w-fpm. php70w-opcache php70w-gd php70w-mysqlnd php70w-mbstring php70w-pecl-redis php70w-pecl-memcached php70w-devel</span><br><span class="line"></span><br><span class="line">systemctl restart httpd</span><br><span class="line"></span><br><span class="line">cd /opt/</span><br><span class="line"></span><br><span class="line">wget https://download.dokuwiki.org/src/dokuwiki/dokuwiki-stable.tgz</span><br><span class="line"></span><br><span class="line">tar -xzvf dokuwiki-stable.tgz</span><br><span class="line"></span><br><span class="line">mv dokuwiki-2018-04-22b/ /var/www/html/wiki/</span><br><span class="line"></span><br><span class="line">chown -R apache:apache /var/www/html/wiki/</span><br><span class="line"></span><br><span class="line">vim /etc/httpd/conf/httpd.conf</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/tecnn/imges/master/image-20211129094817665.png" alt="image-20211129094817665"></p>
<h3 id="如果安装报如下错误："><a href="#如果安装报如下错误：" class="headerlink" title="如果安装报如下错误："></a>如果安装报如下错误：</h3><p>The datadir (‘pages’) at ./data/pages is not found, isn’t accessible or writable. You should check your config and permission settings. Or maybe you want to run the installer?</p>
<p>需要设置如下权限： </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod -R 777 data/ chmod -R 777 lib/ chmod -R 777 conf/ (可能非必须)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setenforce 0</span><br></pre></td></tr></table></figure>

<p>安全配置：</p>
<p><img src="https://raw.githubusercontent.com/tecnn/imges/master/image-20211129094837648.png" alt="image-20211129094837648"></p>
<p>配置https：</p>
]]></content>
      <categories>
        <category>Wiki</category>
      </categories>
      <tags>
        <tag>Doku</tag>
        <tag>文档管理</tag>
        <tag>Wiki</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo</title>
    <url>/2021/11/29/Wiki%20and%20Blog/Hexo/</url>
    <content><![CDATA[<p>hexo是一个基于Nodejs的快速生产静态博客的开源框架，支持Markdown和大多数的Octopress插件，可通过部署到github、gitee和gitlab等方式托管，支持强大的API，可扩展，支持多个自定义主题。</p>
<h1 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h1><p>本文基于Windows部署</p>
<p>Hexo的初级搭建和部署到Github page以及个人域名的绑定</p>
<h2 id="Hexo部署步骤："><a href="#Hexo部署步骤：" class="headerlink" title="Hexo部署步骤："></a>Hexo部署步骤：</h2><h4 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h4><p>Windows直接安装</p>
<p>Linux：sudo apt-get install git -y</p>
<h4 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h4><p>Windows直接安装</p>
<p>Linux：sudo apt-get install nodejs -y</p>
<p>​            sudo apt-get install npm</p>
<p>通过node -v和npm -v进行验证。</p>
<h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>npm install -g hexo-cli</p>
<p>使用hexo -v检查版本信息</p>
<h4 id="初始化hexo以及生成必要文件"><a href="#初始化hexo以及生成必要文件" class="headerlink" title="初始化hexo以及生成必要文件"></a>初始化hexo以及生成必要文件</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init docs</span><br><span class="line">cd docs</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<ul>
<li>node_modules :依赖包</li>
<li>public:存放生成的页面</li>
<li>scaffolds:生成文章的一些模板</li>
<li>source:用来存放自己写的文章</li>
<li>themes:主题</li>
<li>**—config.yml:网站的主要配置文件</li>
</ul>
<h4 id="生成静态页面并开启本地预览"><a href="#生成静态页面并开启本地预览" class="headerlink" title="生成静态页面并开启本地预览"></a>生成静态页面并开启本地预览</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo server or hexo g</span><br><span class="line">浏览器输入localhost:4000可以查看本地预览</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/tecnn/imges/master/image-20211129131553688.png" alt="image-20211129131553688"></p>
<h4 id="Github创建个人仓库"><a href="#Github创建个人仓库" class="headerlink" title="Github创建个人仓库"></a>Github创建个人仓库</h4><p>默认有github账号</p>
<p>创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名</p>
<p><img src="https://raw.githubusercontent.com/tecnn/imges/master/image-20211129131834106.png" alt="image-20211129131834106"></p>
<h4 id="生成SSH添加到Github中进行本机授权"><a href="#生成SSH添加到Github中进行本机授权" class="headerlink" title="生成SSH添加到Github中进行本机授权"></a>生成SSH添加到Github中进行本机授权</h4><p>桌面右击选择git bash here</p>
<p><img src="https://raw.githubusercontent.com/tecnn/imges/master/image-20211129131944078.png" alt="image-20211129131944078"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;your name&quot;</span><br><span class="line">git config --global user.email &quot;your eamul&quot;</span><br></pre></td></tr></table></figure>

<p>以上命令中输入你githun的名字以及注册的邮箱</p>
<p>通过以下命令进行验证你的输入是否正确：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure>

<p>创建SSH key</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your email&quot;</span><br></pre></td></tr></table></figure>

<p>一路回车后在你的用户名下.ssh文件中会生成一个id_rsas.pub的文件，复制里面的rsa key到github中。</p>
<p><img src="https://raw.githubusercontent.com/tecnn/imges/master/image-20211129132315941.png" alt="image-20211129132315941"></p>
<p>通过ssh 今天验证</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/tecnn/imges/master/image-20211129132417149.png" alt="image-20211129132417149"></p>
<h4 id="部署Hexo到github上"><a href="#部署Hexo到github上" class="headerlink" title="部署Hexo到github上"></a>部署Hexo到github上</h4><p>修改docs下_config.yml文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/YourgithubName/YourgithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>安装deploy-git</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deploy-git --save</span><br></pre></td></tr></table></figure>

<p>生成静态页面并上传到github中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate or hexo g</span><br><span class="line">hexo deploy or hexo d</span><br></pre></td></tr></table></figure>

<p>设置github page</p>
<p><img src="https://raw.githubusercontent.com/tecnn/imges/master/image-20211129132824373.png" alt="image-20211129132824373"></p>
<p>在浏览器中输入yourname.githun.io即浏览刚刚设置的站点。</p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
        <tag>博客</tag>
        <tag>文档</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>MiniDoc</title>
    <url>/2021/11/29/Wiki%20and%20Blog/MiniDoc/</url>
    <content><![CDATA[<p>MinDoc 是一款针对IT团队开发的简单好用的文档管理系统。</p>
<p>MinDoc 的前身是 SmartWiki 文档系统。SmartWiki 是基于 PHP 框架 laravel 开发的一款文档管理系统。因 PHP 的部署对普通用户来说太复杂，所以改用 Golang 开发。可以方便用户部署和实用，同时增加Markdown和HTML两种编辑器。开发缘起是公司IT部门需要一款简单实用的项目接口文档管理和分享的系统。其功能和界面源于 kancloud 。可以用来储存日常接口文档，数据库字典，手册说明等文档。内置项目管理，用户管理，权限管理等功能，能够满足大部分中小团队的文档管理需求。</p>
<h3 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h3><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>only Support CentOS7 or Re7</p>
<p>以服务的方式运行MinDoc<br>MinDoc 0.4以上版本支持在Linux和Windows上以服务的方式后台执行，命令如下：</p>
<h4 id="安装服务"><a href="#安装服务" class="headerlink" title="安装服务"></a>安装服务</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./mindoc_linux_amd64 service install</span><br></pre></td></tr></table></figure>

<h4 id="卸载服务"><a href="#卸载服务" class="headerlink" title="卸载服务"></a>卸载服务</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./mindoc_linux_amd64 service remove</span><br></pre></td></tr></table></figure>

<p>执行服务安装后，会创建一个以 mindocd 为服务名的服务。</p>
<p>需要以管理员权限运行</p>
<h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start mindocd</span><br><span class="line">systemctl start enable</span><br></pre></td></tr></table></figure>

<h4 id="使用腾讯免费证书："><a href="#使用腾讯免费证书：" class="headerlink" title="使用腾讯免费证书："></a>使用腾讯免费证书：</h4><p>配置如下：上传证书到指定的文件/opt/conf<br>http方式端口无法关闭，如果没有指定端口，默认为8080</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//开启HTTPS监听</span><br><span class="line"></span><br><span class="line">EnableHTTPS = true</span><br><span class="line"></span><br><span class="line">//HTTPS 监听的IP，默认为空监听所有IP</span><br><span class="line"></span><br><span class="line">HTTPSAddr=</span><br><span class="line"></span><br><span class="line">//HTTPS 监听的端口</span><br><span class="line"></span><br><span class="line">HTTPSPort=443</span><br><span class="line"></span><br><span class="line">//ssl 证书路径</span><br><span class="line"></span><br><span class="line">HTTPSCertFile =/opt/conf/XXX.crt</span><br><span class="line"></span><br><span class="line">//SSL 证书 keyfile 的路径</span><br><span class="line"></span><br><span class="line">HTTPSKeyFile = /opt/conf/XXX.key</span><br></pre></td></tr></table></figure>



<h4 id="MinDoc-备份分为数据库备份和文件备份。"><a href="#MinDoc-备份分为数据库备份和文件备份。" class="headerlink" title="MinDoc 备份分为数据库备份和文件备份。"></a>MinDoc 备份分为数据库备份和文件备份。</h4><h5 id="mysql-数据库的备份"><a href="#mysql-数据库的备份" class="headerlink" title="mysql 数据库的备份"></a>mysql 数据库的备份</h5><p>如果你使用的是mysql数据库，可以有以下集中方式来备份你的数据库：</p>
<p>mysqldump备份数据库*</p>
<p>在mysql命令行中执行如下命令来备份数据库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump —databases mindoc_db &gt; mindoc_db.sql</span><br></pre></td></tr></table></figure>

<p>mysqldump 完整的参数是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump -u USER_NAME -p PASSWORD [其他选项] DB [其他数据库库表]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">—default-character-set： 设置字符集</span><br><span class="line"></span><br><span class="line">—single-transaction : 将导出设置成事务</span><br><span class="line"></span><br><span class="line">—no-data : 导出的SQL脚本中，将只包含创建表的create 语句。</span><br><span class="line"></span><br><span class="line">—add-drop-table :导出的脚本中，包含 drop table if exists</span><br><span class="line"></span><br><span class="line">—routines导出存储过程及函数</span><br><span class="line"></span><br><span class="line">—events导出事件</span><br><span class="line"></span><br><span class="line">—triggers 导出触发器</span><br></pre></td></tr></table></figure>

<p>恢复备份</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source mindoc_db.sql</span><br></pre></td></tr></table></figure>

<p>sqlite数据库备份<br>因为sqlite是单文件数据库，只需要找到sqlite数据库物理路径，拷贝走就可以了。</p>
<h4 id="mindoc-文件备份"><a href="#mindoc-文件备份" class="headerlink" title="mindoc 文件备份"></a>mindoc 文件备份</h4><p>将整个mindoc目录打包即可。</p>
<p>恢复<br>先恢复数据库，之后修改conf/app.conf中有变动的地方。启动mindoc即可。</p>
]]></content>
      <categories>
        <category>Wiki</category>
      </categories>
      <tags>
        <tag>文档管理</tag>
        <tag>Wiki</tag>
        <tag>MiniDoc</tag>
      </tags>
  </entry>
  <entry>
    <title>MM_Wiki</title>
    <url>/2021/11/29/Wiki%20and%20Blog/MMWiki/</url>
    <content><![CDATA[<p>MM-Wiki 是一个轻量级的企业知识分享与团队协同软件，可用于快速构建企业 Wiki 和团队知识分享平台。部署方便，使用简单，帮助团队构建一个信息共享、文档管理的协作环境。部署简单，支持markdown语法，支持附件上传。具有完善的角色权限管理。档具有分享和下载功能，目前只支持下载 MarkDown 源文件</p>
<h3 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h3><h4 id="Github项目-https-github-com-phachon-mm-wiki"><a href="#Github项目-https-github-com-phachon-mm-wiki" class="headerlink" title="Github项目: https://github.com/phachon/mm-wiki"></a>Github项目: <a href="https://github.com/phachon/mm-wiki">https://github.com/phachon/mm-wiki</a></h4><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><p>安装文件不支持ARM 无法安装，Vbox测试成功</p>
<h4 id="安装mysql以及基本配置"><a href="#安装mysql以及基本配置" class="headerlink" title="安装mysql以及基本配置"></a>安装mysql以及基本配置</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">• 安装 MariaDB</span><br><span class="line"></span><br><span class="line">yum -y install mariadb-server</span><br><span class="line">启动 MariaDB 服务：</span><br><span class="line">systemctl start mariadb</span><br><span class="line">systemctl enable mariadb</span><br><span class="line">•配置 MariaDB：</span><br><span class="line"></span><br><span class="line">mysql_secure_installation</span><br><span class="line">Set root password? [Y/n] Y</span><br><span class="line">New password:</span><br><span class="line">Re-enter new password:</span><br><span class="line">一路Y</span><br><span class="line">•创建用户：</span><br><span class="line">mysql&gt; create database mm_wiki_db; # 创建 nextcloud 数据库</span><br><span class="line">mysql&gt; grant all on nextcloud.* to ‘nextcloud’@’localhost’ identified by ‘密码’; # 创建 nextcloud 用户并授权</span><br><span class="line">mysql&gt; flush privileges; # 刷新权限（将当前 user 和 privilige 表中的用户信息/权限设置从 mysql 库提取到内存中）</span><br></pre></td></tr></table></figure>

<h3 id="安装mm-wiki"><a href="#安装mm-wiki" class="headerlink" title="安装mm_wiki"></a>安装mm_wiki</h3><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ mkdir mm_wiki</span><br><span class="line">$ cd mm_wiki</span><br><span class="line"></span><br><span class="line">安装配置MM_Wiki</span><br><span class="line">•下载安装MM_Wiki</span><br><span class="line"></span><br><span class="line">https://github.com/phachon/mm-wiki/releases/download/v0.1.9/mm-wiki-v0.1.9-linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">解压到当前目录</span><br><span class="line">$ tar -zxvf mm-wiki-linux-amd64.tar.gz</span><br><span class="line">cd mm-wiki目录</span><br><span class="line">mkdir data 建立数据存放文件夹</span><br><span class="line">防火墙开放tcp 8090端口</span><br><span class="line">firewall-cmd —list-all 查看防火墙规则</span><br><span class="line">firewall-cmd —query-port=8090/tcp 查询8090是否开放</span><br><span class="line">firewall-cmd —permanent —add-port=8090/tcp 添加开放tcp8090端口</span><br><span class="line">firewall-cmd —reload 重新加载防火墙</span><br><span class="line"></span><br><span class="line">进入程序安装目录</span><br><span class="line">$ cd install</span><br><span class="line"></span><br><span class="line">执行安装程序，默认端口为 8090，指定其他端口加参数 –port=8087</span><br><span class="line">$ ./install （安装完后，[http://ip:8090不可用，如果需要使用，可以ps](http://ip:8090不可用，如果需要使用，可以ps/) 然后kill 相关进程，并且再次运行./install)</span><br><span class="line"></span><br><span class="line">浏览器访问 [http://ip:8090](http://ip:8090/) 进入安装界面，完成安装配置</span><br><span class="line"></span><br><span class="line">协议、IP、端口、指定文档数据目录、MySQL数据库配置</span><br><span class="line"></span><br><span class="line">Ctrl + C 停止 install 程序, 启动 MM-Wiki 系统</span><br><span class="line"></span><br><span class="line">$ cd ..</span><br><span class="line">$ ./mm-wiki —conf conf/mm-wiki.conf &amp; 后台运行</span><br><span class="line">Firewall-cmd —query-port=8080/tcp 查询指定访问MM-WIKI的端口是否开放</span><br><span class="line">Firewall-cmd —permanent —add-port=8080/tcp 添加允许访问指定的端口</span><br><span class="line">Firewall-cmd —reload 重新加载防火墙</span><br><span class="line"></span><br><span class="line">浏览器访问你监听的 ip 和端口</span><br><span class="line"></span><br><span class="line">登录</span><br></pre></td></tr></table></figure>



<h4 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h4><p>Nginx是一款高性能的网络服务器，它还可以用作反向代理和缓存服务器，输入下面命令以安装Nginx Web服务器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum install nginx -y</span><br><span class="line">默认web目录位置：/usr/share/nginx/html</span><br><span class="line">默认安装配置文件位置： /etc/nginx/conf.d/XXX.conf</span><br><span class="line">安装完成后，我们可以使用以下命令启动Nginx：</span><br><span class="line"></span><br><span class="line">systemctl start nginx</span><br><span class="line"></span><br><span class="line">通过运行以下命令，使Nginx在系统引导时自动启动：</span><br><span class="line"></span><br><span class="line">systemctl enable nginx</span><br><span class="line"></span><br><span class="line">现在检查它的状态：</span><br><span class="line"></span><br><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure>

<p>正常情况下运行都正常，同时如果出现“Enabled”表示启动时自动启动，上面的命令在运行后不会立即退出，需要按“q”才能退出。</p>
<p>检查Nginx版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nginx -v</span><br><span class="line"></span><br><span class="line">nginx version: nginx/1.14.0</span><br></pre></td></tr></table></figure>

<p>如果要在本地RHEL 8/CentOS 8计算机上安装LEMP，请在浏览器地址栏中输入127.0.0.1或localhost，应该能看到“欢迎使用Nginx”网页，这意味着Nginx Web服务器正常运行：</p>
<p>默认情况下，RHEL 8/CentOS 8禁止公共访问端口80，要允许其他计算机访问该网页，我们需要在firewalld中打开端口80，运行以下命令以打开端口80：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd —permanent —zone=public —add-service=http</span><br><span class="line"></span><br><span class="line">如果想稍后在Nginx上启用HTTPS，那么还需要打开端口443：</span><br><span class="line"></span><br><span class="line">firewall-cmd —permanent —zone=public —add-service=https</span><br><span class="line"></span><br><span class="line">—permanent选项将使此防火墙规则在系统重新启动后保持不变，接下来，重新加载防火墙守护程序以使更改生效：</span><br><span class="line"></span><br><span class="line">systemctl reload firewalld</span><br></pre></td></tr></table></figure>

<p>现在可以公开访问Nginx网页了。</p>
<p>最后，我们需要将用户nginx作为web目录的所有者，默认情况下，它由root用户拥有：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown nginx:nginx /usr/share/nginx/html -R</span><br></pre></td></tr></table></figure>



<h4 id="如果需要，可用-nginx-配置反向代理"><a href="#如果需要，可用-nginx-配置反向代理" class="headerlink" title="如果需要，可用 nginx 配置反向代理"></a>如果需要，可用 nginx 配置反向代理</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Nginx配置启用https</span><br><span class="line">1，查看是否安装了https_ssl_module模块</span><br><span class="line">/user/local/nginx/sbin/nginx -V</span><br><span class="line">如果出现https_ssl_module则表示已安装</span><br><span class="line"></span><br><span class="line">2, 申请证书</span><br><span class="line">在腾讯云SSL 界面申请免费的DV证书</span><br><span class="line"></span><br><span class="line">申请好之后需要做TXT的主机记录解析IP</span><br><span class="line"></span><br><span class="line">下载申请好的证书到Nginx安装目录，默认在/etc/nginx 下面建立SSL文件夹</span><br><span class="line"></span><br><span class="line">3， 编辑Nginx配置文件</span><br><span class="line">vi /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>

<p>配置如下：<br>反向代理部分：</p>
<p>Https部分：</p>
<p>Nginx配置Https其他参考<br>1.首先在Nginx的安装目录下创建cert目录，将下载的全部文件拷贝到cert目录中。<br>2.打开 Nginx 安装目录下 conf 目录中的 nginx.conf 文件，找到“HTTPS server”部分。<br>3.指定证书路径，为如下示意并保存：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">listen 443;</span><br><span class="line"></span><br><span class="line">server_name 你网站的域名;</span><br><span class="line"></span><br><span class="line">ssl on;</span><br><span class="line"></span><br><span class="line">root html;</span><br><span class="line"></span><br><span class="line">index index.html index.htm;</span><br><span class="line"></span><br><span class="line">ssl_certificate cert/你的证书文件名.pem;</span><br><span class="line"></span><br><span class="line">ssl_certificate_key cert/你的证书文件名.key;</span><br><span class="line"></span><br><span class="line">ssl_session_timeout 5m;</span><br><span class="line"></span><br><span class="line">ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line"></span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line"></span><br><span class="line">ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line"></span><br><span class="line">root html;</span><br><span class="line"></span><br><span class="line">index index.html index.htm;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重启Nginx，这时候你的站点应该就已经可以通过https方式访问了。</p>
<p>更改端口号<br>如果MM_Wiki安装时定义使用的是80端口，现在需要更改监听的端口，操作如下：</p>
<p>1,更改MM_Wiki配置文件listen的端口号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /root/mm-wiki/conf</span><br><span class="line">vi mm-wiki.conf</span><br></pre></td></tr></table></figure>

<p>2,停止MM_Wiki的服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用lsof -i:端口号查看服务运行的PID</span><br><span class="line">ps aux 或者ps -le</span><br><span class="line"></span><br><span class="line">kill 9 需要停止的PID号</span><br></pre></td></tr></table></figure>

<p>3，重新启动MM_Wiki服务</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用nohub + &amp; 使服务后台运行</span><br><span class="line">nohup ./mm-wiki –conf conf/mm-wiki.conf &amp;</span><br><span class="line"></span><br><span class="line">Apache启用https，前提已经保证apache已经安装完成</span><br><span class="line">证书来自腾讯免费SSL证书：</span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://cloud.tencent.com/document/product/400/35243">https://cloud.tencent.com/document/product/400/35243</a></p>
<p>A，安装 mod_ssl<br>使用下面的命令安装 mod_ssl</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dnf install mod_ssl</span><br></pre></td></tr></table></figure>

<p>B, 确定 mod_ssl 被启用<br>这一步不是必须的，但是你可以使用下面的命令确定安装的 mod_ssl 已经被启用了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apachectl -M | grep ssl （此步操作为成功，报错如下）</span><br></pre></td></tr></table></figure>

<p>正确返回如下：</p>
<p>类似上面的情况和内容，你可用通过上面的返回确定 ssl 已经被启用了</p>
<p>C, 防火墙配置启用9092（默认Https为443，这里更改使用9092端口）<br>要执行下面的命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd –zone=public –permanent –add-service=https</span><br><span class="line">firewall-cmd –zone=public –permanent –add-port=9092/tcp</span><br><span class="line">firewall-cmd –reload</span><br><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure>

<p>D, 配置SSL证书：<br>首次安装的 Apache 服务器，conf.d、conf、conf.modules.d 等目录默认在 /etc/httpd 目录下</p>
<p>从腾讯下载申请好的证书，然后将apache的三个张数上传到：/etc/httpd/ssl,如果没有ssl可以mkdir建立</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /etc/httpd/</span><br><span class="line">mkdir ssl</span><br></pre></td></tr></table></figure>

<p>a，配置httpd.conf开启支持SSL</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /etc/httpd/conf/httpd.conf</span><br><span class="line">找到 Include conf.modules.d/*.conf(此项用于加载配置SSL目录)，确保此项没有被注释</span><br></pre></td></tr></table></figure>

<p>b，配置conf.modules.d</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /etc/httpd/conf.modules.d</span><br><span class="line">编辑00-ssl.conf 配置文件</span><br><span class="line">找到 LoadModule ssl_module modules/mod_ssl.so（用于加载 SSL 模块）配置语句，并确认该配置语句未被注释，若已注释，请去掉首行的注释符号（#）</span><br><span class="line">保存配置文件</span><br></pre></td></tr></table></figure>

<p>c，配置ssl.conf开启ssl</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /etc/httpd/conf.d</span><br><span class="line">编辑ssl.conf</span><br><span class="line"></span><br><span class="line">DocumentRoot “ /root/mm-wiki”</span><br><span class="line"></span><br><span class="line">ServerName 127.0.0.1:443</span><br><span class="line"></span><br><span class="line">ServerAdmin [you@example.com](mailto:you@example.com)</span><br><span class="line"></span><br><span class="line">ErrorLog “/etc/httpd/logs/error_log”</span><br><span class="line"></span><br><span class="line">TransferLog “/etc/httpd/logs/access_log”</span><br><span class="line"></span><br><span class="line">SSLEngine on</span><br><span class="line"></span><br><span class="line">SSLCertificateFile “/etc/httpd/ssl/Apache/XXX.crt “</span><br><span class="line">SSLCertificateKeyFile “/etc/httpd/ssl/Apache/XXX.key”</span><br><span class="line">SSLCertificateChainFile “/etc/httpd/ssl/Apache/XXX.crt”</span><br><span class="line">重启apache后即可使用[https://ip](https://ip/) 访问</span><br><span class="line"></span><br><span class="line">E，配置http自动跳转https</span><br></pre></td></tr></table></figure>

<p>a，配置httpd.conf开启rewrite特性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">确认配置文件是否存在</span><br><span class="line">LoadModule rewrite_module modules/mod_rewrite.so （如果有注释，需要取消）</span><br></pre></td></tr></table></figure>

<p>b，配置rewrite</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /etc/httpd/conf/httpd.conf</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="配置https"><a href="#配置https" class="headerlink" title="配置https"></a>配置https</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RewriteEngine on</span><br><span class="line">RewriteCond %&#123;SERVER_PORT&#125; !^443$</span><br><span class="line">RewriteRule ^(.*)?$ [https://%&#123;SERVER_NAME&#125;%&#123;REQUEST_URI&#125;](https://%&#123;server_name&#125;%&#123;request_uri&#125;/) [L,R]</span><br><span class="line"></span><br><span class="line">参考MM_Wiki</span><br><span class="line"></span><br><span class="line">F，配置域名</span><br><span class="line">修改/etc/httpd/conf.d/ssl.conf 和 /etc/httpd/conf/httpd.conf</span><br><span class="line">httpd.conf如下：</span><br><span class="line"></span><br><span class="line">ssl.conf如下：</span><br><span class="line"></span><br><span class="line">G，更改https默认443端口号</span><br><span class="line">本例以配置Nextcloud为例：</span><br><span class="line">cd /etc/httpd/conf.d/</span><br><span class="line">vi ssl.conf</span><br><span class="line">更改如下：</span><br><span class="line"></span><br><span class="line">默认http 80更改如下（好像不需要）：</span><br><span class="line">本例以配置Nextcloud为例：</span><br><span class="line">cd /etc/httpd/conf/</span><br><span class="line">vi httpd.conf</span><br><span class="line"></span><br><span class="line">H，配置SELinux,运行TCP9092通过</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Wiki</category>
      </categories>
      <tags>
        <tag>文档管理</tag>
        <tag>Wiki</tag>
        <tag>MM_Wiki</tag>
      </tags>
  </entry>
  <entry>
    <title>Seafile 安装脚本（转载）</title>
    <url>/2021/11/16/%E7%A7%81%E6%9C%89%E4%BA%91/Seafile%20%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>Seafile 是一款开源的企业云盘，注重可靠性和性能。支持 Windows, Mac, Linux, iOS, Android 平台。支持文件同步或者直接挂载到本地访问，除了一般网盘所提供的云存储以及共享功能外，Seafile还提供消息通信、群组讨论等辅助功能，帮助更好的围绕文件展开协同工作。</p>
<h1 id="安装脚本"><a href="#安装脚本" class="headerlink" title="安装脚本"></a>安装脚本</h1><p>一键安装脚本可以帮助您在 Ubuntu 18.04/20.04 系统上快速的安装好 Seafile 服务器，并配置好 MariaDB, Memcached, WebDAV, Ngnix 和开机自动启动脚本。</p>
<h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><p>安装干净的 Ubuntu 18.04/20.04，并<strong>做好镜像</strong> (如果安装失败需要还原到镜像)。</p>
<p>切换成 root 账号 (<code>sudo -i</code>)</p>
<h3 id="获取安装脚本"><a href="#获取安装脚本" class="headerlink" title="获取安装脚本"></a>获取安装脚本</h3><p>适用于 Seafile 8.0.x 及以上版本</p>
<p>cd /opt</p>
<p>wget <a href="https://seafile-downloads.oss-cn-shanghai.aliyuncs.com/seafile-server_8.0.7_x86-64.tar.gz">https://seafile-downloads.oss-cn-shanghai.aliyuncs.com/seafile-server_8.0.7_x86-64.tar.gz</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/haiwen/seafile-server-installer-cn/master/seafile-8.0_ubuntu</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="运行安装脚本并指定要安装的版本-例如-8-0-0"><a href="#运行安装脚本并指定要安装的版本-例如-8-0-0" class="headerlink" title="运行安装脚本并指定要安装的版本 (例如 8.0.0)"></a>运行安装脚本并指定要安装的版本 (例如 8.0.0)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash seafile-8.0_ubuntu 8.0.7</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>脚本会让您选择要安装的版本, 按照提示进行选择即可:</p>
<ul>
<li>如果要安装专业版, 需要先将下载好的专业版的包 <code>seafile-pro-server_8.0.0_x86-64.tar.gz</code> 放到 <code>/opt/</code> 目录下</li>
<li>如果是安装开源版，安装脚本在执行过程中会检查 <code>/opt</code>目录下是否有指定版本号的安装包，如果存在则会安装此包，否则会从 Seafile 网站下载。所以，为了避免因下载失败而导致安装中断，您可以提前下载好安装包放到<code>/opt/</code>目录下。</li>
</ul>
<p>该脚本运行完后会在命令行中打印配置信息和管理员账号密码，请仔细阅读。(您也可以查看安装日志<code>/opt/seafile/aio_seafile-server.log</code>)，MySQL 的 root 用户密码存储在 <code>/root/.my.cnf</code> 中；MySQL 的 seafile 用户密码存储在 <code>/opt/seafile.my.cnf</code> 中。</p>
<h3 id="通过-Web-UI-对服务器进行配置"><a href="#通过-Web-UI-对服务器进行配置" class="headerlink" title="通过 Web UI 对服务器进行配置"></a>通过 Web UI 对服务器进行配置</h3><p>安装完成后，您需要通过 Web UI 服务器进行基本的配置，以便能正常的从网页端进行文件的上传和下载：</p>
<ol>
<li><p>首先在浏览器中输入服务器的地址，并用管理员账号和初始密码登录</p>
</li>
<li><p>点击界面的右上角的头像按钮进入管理员界面 </p>
</li>
<li><p><a href="https://github.com/haiwen/seafile-server-installer-cn/blob/master/images/system-admin-entrance.png"><img src="https://github.com/haiwen/seafile-server-installer-cn/raw/master/images/system-admin-entrance.png" alt="管理员入口"></a></p>
</li>
<li><p>进入设置页面填写正确的服务器对外的 SERVICE_URL 和 FILE_SERVER_ROOT，比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SERVICE_URL: http://www.your-domain.com</span><br><span class="line">FILE_SERVER_ROOT: http://www.your-domain.com/seafhttp</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<p>现在您可以退出管理员界面，并进行基本的测试。关于服务器的配置选项介绍和日常运维可以参考 <a href="https://cloud.seafile.com/published/seafile-manual-cn/config/README.md">https://cloud.seafile.com/published/seafile-manual-cn/config/README.md</a></p>
<h3 id="如果安装脚本出错"><a href="#如果安装脚本出错" class="headerlink" title="如果安装脚本出错"></a>如果安装脚本出错</h3><p>如果安装脚本出错，您需要重置虚拟机到干净的镜像。</p>
<h3 id="启动关闭服务"><a href="#启动关闭服务" class="headerlink" title="启动关闭服务"></a>启动关闭服务</h3><p>自动安装脚本会在系统中安装开机自动启动脚本。您也可以使用该脚本来关闭/启动 Seafile 服务，命令如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">service seafile-server stop</span><br><span class="line">service seafile-server start</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="启用HTTPS"><a href="#启用HTTPS" class="headerlink" title="启用HTTPS"></a>启用HTTPS</h3><p>上传证书到/etc/ssl/下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">log_format seafileformat &#x27;$http_x_forwarded_for $remote_addr [$time_local] &quot;$request&quot; $status $body_bytes_sent &quot;$http_referer&quot; &quot;$http_user_agent&quot; $upstream_response_time&#x27;;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name tecnn.cn;</span><br><span class="line">    rewrite ^ https://$http_host$request_uri? permanent;</span><br><span class="line">    server_tokens off;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl http2;</span><br><span class="line">    ssl_certificate /etc/ssl/www.tecnn.cn.pem;</span><br><span class="line">    ssl_certificate_key /etc/ssl/www.tecnn.cn.key;</span><br><span class="line">    server_name tecnn.cn;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_session_cache shared:SSL:5m;</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    proxy_set_header X-Forwarded-For $remote_addr;</span><br><span class="line"></span><br><span class="line">  #  add_header Strict-Transport-Security “max-age=31536000; includeSubDomains”;</span><br><span class="line">    server_tokens off;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">         proxy_pass         http://127.0.0.1:8000;</span><br><span class="line">         proxy_set_header   Host $host;</span><br><span class="line">         proxy_set_header   X-Real-IP $remote_addr;</span><br><span class="line">         proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">         proxy_set_header   X-Forwarded-Host $server_name;</span><br><span class="line">         proxy_set_header   X-Forwarded-Proto $scheme;</span><br><span class="line">         proxy_read_timeout  1200s;</span><br><span class="line"></span><br><span class="line">         # used for view/edit office file via Office Online Server</span><br><span class="line">         client_max_body_size 0;</span><br><span class="line"></span><br><span class="line">         access_log      /var/log/nginx/seahub.access.log seafileformat;</span><br><span class="line">         error_log       /var/log/nginx/seahub.error.log;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /seafhttp &#123;</span><br><span class="line">         rewrite ^/seafhttp(.*)$ $1 break;</span><br><span class="line">         proxy_pass http://127.0.0.1:8082;</span><br><span class="line">         client_max_body_size 0;</span><br><span class="line">         proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">         proxy_connect_timeout  36000s;</span><br><span class="line">         proxy_read_timeout  36000s;</span><br><span class="line"></span><br><span class="line">        access_log      /var/log/nginx/seafhttp.access.log seafileformat;</span><br><span class="line">        error_log       /var/log/nginx/seafhttp.error.log;</span><br><span class="line">    &#125;</span><br><span class="line">    location /media &#123;</span><br><span class="line">        root /opt/seafile/seafile-server-latest/seahub;</span><br><span class="line">    &#125;</span><br><span class="line">    location /seafdav &#123;</span><br><span class="line">        proxy_pass         http://127.0.0.1:8080/seafdav;</span><br><span class="line">        proxy_set_header   Host $host;</span><br><span class="line">        proxy_set_header   X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header   X-Forwarded-Host $server_name;</span><br><span class="line">        proxy_set_header   X-Forwarded-Proto $scheme;</span><br><span class="line">        proxy_read_timeout  1200s;</span><br><span class="line"></span><br><span class="line">        client_max_body_size 0;</span><br><span class="line"></span><br><span class="line">        access_log      /var/log/nginx/seafdav.access.log seafileformat;</span><br><span class="line">        error_log       /var/log/nginx/seafdav.error.log;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="UFW-防火墙配置"><a href="#UFW-防火墙配置" class="headerlink" title="UFW 防火墙配置"></a>UFW 防火墙配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ufw status ---查看防火墙状态</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Usage: ufw COMMAND</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line"> enable                          enables the firewall</span><br><span class="line"> disable                         disables the firewall</span><br><span class="line"> default ARG                     set default policy</span><br><span class="line"> logging LEVEL                   set logging to LEVEL</span><br><span class="line"> allow ARGS                      add allow rule</span><br><span class="line"> deny ARGS                       add deny rule</span><br><span class="line"> reject ARGS                     add reject rule</span><br><span class="line"> limit ARGS                      add limit rule</span><br><span class="line"> delete RULE|NUM                 delete RULE</span><br><span class="line"> insert NUM RULE                 insert RULE at NUM</span><br><span class="line"> route RULE                      add route RULE</span><br><span class="line"> route delete RULE|NUM           delete route RULE</span><br><span class="line"> route insert NUM RULE           insert route RULE at NUM</span><br><span class="line"> reload                          reload firewall</span><br><span class="line"> reset                           reset firewall</span><br><span class="line"> status                          show firewall status</span><br><span class="line"> status numbered                 show firewall status as numbered list of RULES</span><br><span class="line"> status verbose                  show verbose firewall status</span><br><span class="line"> show ARG                        show firewall report</span><br><span class="line"> version                         display version information</span><br><span class="line"></span><br><span class="line">Application profile commands:</span><br><span class="line"> app list                        list application profiles</span><br><span class="line"> app info PROFILE                show information on PROFILE</span><br><span class="line"> app update PROFILE              update PROFILE</span><br><span class="line"> app default ARG                 set default application policy</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Seafil Cloud</category>
      </categories>
      <tags>
        <tag>Seafile</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言系列（一）</title>
    <url>/2021/11/29/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>C programming</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>C语言</tag>
        <tag>编程</tag>
        <tag>C Programming</tag>
        <tag>程序涉及</tag>
      </tags>
  </entry>
</search>
