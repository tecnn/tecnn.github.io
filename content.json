{"meta":{"title":"New Generation Of Migrant Workers","subtitle":"","description":"","author":"Kuter Liu","url":"http://tecnn.github.io","root":"/"},"pages":[],"posts":[{"title":"Cisco系列（一）","slug":"Cisco/Cisco基础","date":"2021-11-28T16:00:00.000Z","updated":"2021-11-29T05:42:18.143Z","comments":true,"path":"2021/11/29/Cisco/Cisco基础/","link":"","permalink":"http://tecnn.github.io/2021/11/29/Cisco/Cisco%E5%9F%BA%E7%A1%80/","excerpt":"","text":"","categories":[{"name":"Cisco","slug":"Cisco","permalink":"http://tecnn.github.io/categories/Cisco/"}],"tags":[{"name":"Cisco","slug":"Cisco","permalink":"http://tecnn.github.io/tags/Cisco/"},{"name":"Vlan","slug":"Vlan","permalink":"http://tecnn.github.io/tags/Vlan/"},{"name":"思科","slug":"思科","permalink":"http://tecnn.github.io/tags/%E6%80%9D%E7%A7%91/"},{"name":"路由器","slug":"路由器","permalink":"http://tecnn.github.io/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"},{"name":"交换机","slug":"交换机","permalink":"http://tecnn.github.io/tags/%E4%BA%A4%E6%8D%A2%E6%9C%BA/"}],"author":"Kuter Liu"},{"title":"BookStack","slug":"Wiki and Blog/BookStack","date":"2021-11-28T16:00:00.000Z","updated":"2021-11-29T05:02:32.079Z","comments":true,"path":"2021/11/29/Wiki and Blog/BookStack/","link":"","permalink":"http://tecnn.github.io/2021/11/29/Wiki%20and%20Blog/BookStack/","excerpt":"","text":"BookStack 是基于Mindoc、使用Go语言的Beego框架开发的功能类似GitBook和看云的在线文档管理系统，实现了文档采集、导入、电子书生成以及版本控制等强大的文档功能。 目前只测试了Ubuntu20，其他系统暂时涉及测试 安装部署","categories":[{"name":"blog","slug":"blog","permalink":"http://tecnn.github.io/categories/blog/"}],"tags":[{"name":"blog","slug":"blog","permalink":"http://tecnn.github.io/tags/blog/"},{"name":"博客","slug":"博客","permalink":"http://tecnn.github.io/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"文档","slug":"文档","permalink":"http://tecnn.github.io/tags/%E6%96%87%E6%A1%A3/"},{"name":"BookStack","slug":"BookStack","permalink":"http://tecnn.github.io/tags/BookStack/"}],"author":"Kuter Liu"},{"title":"Docsify","slug":"Wiki and Blog/Docsify","date":"2021-11-28T16:00:00.000Z","updated":"2021-11-29T03:06:29.509Z","comments":true,"path":"2021/11/29/Wiki and Blog/Docsify/","link":"","permalink":"http://tecnn.github.io/2021/11/29/Wiki%20and%20Blog/Docsify/","excerpt":"","text":"Docsify 是一个动态生成文档网站的工具。不同于 GitBook、Hexo 的地方是它不会生成将 .md 转成 .html 文件，所有转换工作都是在运行时进行。 这将非常实用，如果只是需要快速的搭建一个小型的文档网站，或者不想因为生成的一堆 .html 文件“污染” commit 记录，只需要创建一个 index.html 就可以开始写文档而且直接部署在 GitHub Pages。 安装部署","categories":[{"name":"Wiki","slug":"Wiki","permalink":"http://tecnn.github.io/categories/Wiki/"}],"tags":[{"name":"文档管理","slug":"文档管理","permalink":"http://tecnn.github.io/tags/%E6%96%87%E6%A1%A3%E7%AE%A1%E7%90%86/"},{"name":"Wiki","slug":"Wiki","permalink":"http://tecnn.github.io/tags/Wiki/"},{"name":"Docsify","slug":"Docsify","permalink":"http://tecnn.github.io/tags/Docsify/"}],"author":"Kuter Liu"},{"title":"DokuWiki","slug":"Wiki and Blog/DokuWiki","date":"2021-11-28T16:00:00.000Z","updated":"2021-11-29T03:07:48.036Z","comments":true,"path":"2021/11/29/Wiki and Blog/DokuWiki/","link":"","permalink":"http://tecnn.github.io/2021/11/29/Wiki%20and%20Blog/DokuWiki/","excerpt":"","text":"DOKUWIKI是一个开源WIKI引擎程序,运行于PHP环境下,程序小巧而功能强大、灵活,适合中小团队和个人网站知识库的管理。Dokuwiki作为一个wiki引擎，软件主体十分小巧但功能非常强大而又灵活。它语法简单，为易写性、易读性提供保障。它提供权限管理和安全策略，能够保证信息库的安全性。它又是开源的，这给熟悉PHP的开发者留下了无限的可能。它还有一个十分活跃的社区论坛，在那里能找到很多关于安装和使用的有用信息，另外，非常丰富的扩展插件也诞生于此。如果有兴趣，你也可以注册一个账号，在社区论坛里提出需求和解决别人提出的需求。如果提供一个中小团队或者个人使用，那么Dokuwiki非常合适。 安装12345678910111213yum update -yyum upgrade -yyum install vim wget -ysystemctl enable httpdsystemctl start httpdfirewall-cmd –add-port=80/tcp –permanentfirewall-cmd –reload 12345678910111213141516171819rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpmrpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpmyum install php70w php70w-common php70w-fpm. php70w-opcache php70w-gd php70w-mysqlnd php70w-mbstring php70w-pecl-redis php70w-pecl-memcached php70w-develsystemctl restart httpdcd /opt/wget https://download.dokuwiki.org/src/dokuwiki/dokuwiki-stable.tgztar -xzvf dokuwiki-stable.tgzmv dokuwiki-2018-04-22b/ /var/www/html/wiki/chown -R apache:apache /var/www/html/wiki/vim /etc/httpd/conf/httpd.conf 如果安装报如下错误：The datadir (‘pages’) at ./data/pages is not found, isn’t accessible or writable. You should check your config and permission settings. Or maybe you want to run the installer? 需要设置如下权限： 1chmod -R 777 data/ chmod -R 777 lib/ chmod -R 777 conf/ (可能非必须) 1setenforce 0 安全配置： 配置https：","categories":[{"name":"Wiki","slug":"Wiki","permalink":"http://tecnn.github.io/categories/Wiki/"}],"tags":[{"name":"Doku","slug":"Doku","permalink":"http://tecnn.github.io/tags/Doku/"},{"name":"文档管理","slug":"文档管理","permalink":"http://tecnn.github.io/tags/%E6%96%87%E6%A1%A3%E7%AE%A1%E7%90%86/"},{"name":"Wiki","slug":"Wiki","permalink":"http://tecnn.github.io/tags/Wiki/"}],"author":"Kuter Liu"},{"title":"Hexo","slug":"Wiki and Blog/Hexo","date":"2021-11-28T16:00:00.000Z","updated":"2021-11-29T05:30:41.294Z","comments":true,"path":"2021/11/29/Wiki and Blog/Hexo/","link":"","permalink":"http://tecnn.github.io/2021/11/29/Wiki%20and%20Blog/Hexo/","excerpt":"","text":"hexo是一个基于Nodejs的快速生产静态博客的开源框架，支持Markdown和大多数的Octopress插件，可通过部署到github、gitee和gitlab等方式托管，支持强大的API，可扩展，支持多个自定义主题。 第一部分本文基于Windows部署 Hexo的初级搭建和部署到Github page以及个人域名的绑定 Hexo部署步骤：安装GitWindows直接安装 Linux：sudo apt-get install git -y 安装nodejsWindows直接安装 Linux：sudo apt-get install nodejs -y ​ sudo apt-get install npm 通过node -v和npm -v进行验证。 安装Hexonpm install -g hexo-cli 使用hexo -v检查版本信息 初始化hexo以及生成必要文件123hexo init docscd docsnpm install node_modules :依赖包 public:存放生成的页面 scaffolds:生成文章的一些模板 source:用来存放自己写的文章 themes:主题 **—config.yml:网站的主要配置文件 生成静态页面并开启本地预览123hexo ghexo server or hexo g浏览器输入localhost:4000可以查看本地预览 Github创建个人仓库默认有github账号 创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名 生成SSH添加到Github中进行本机授权桌面右击选择git bash here 12git config --global user.name &quot;your name&quot;git config --global user.email &quot;your eamul&quot; 以上命令中输入你githun的名字以及注册的邮箱 通过以下命令进行验证你的输入是否正确： 12git config user.namegit config user.email 创建SSH key 1ssh-keygen -t rsa -C &quot;your email&quot; 一路回车后在你的用户名下.ssh文件中会生成一个id_rsas.pub的文件，复制里面的rsa key到github中。 通过ssh 今天验证 1ssh -T git@github.com 部署Hexo到github上修改docs下_config.yml文件 1234deploy: type: git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master 安装deploy-git 1npm install hexo-deploy-git --save 生成静态页面并上传到github中 123hexo cleanhexo generate or hexo ghexo deploy or hexo d 设置github page 在浏览器中输入yourname.githun.io即浏览刚刚设置的站点。","categories":[{"name":"blog","slug":"blog","permalink":"http://tecnn.github.io/categories/blog/"}],"tags":[{"name":"blog","slug":"blog","permalink":"http://tecnn.github.io/tags/blog/"},{"name":"博客","slug":"博客","permalink":"http://tecnn.github.io/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"文档","slug":"文档","permalink":"http://tecnn.github.io/tags/%E6%96%87%E6%A1%A3/"},{"name":"Hexo","slug":"Hexo","permalink":"http://tecnn.github.io/tags/Hexo/"}],"author":"Kuter Liu"},{"title":"MiniDoc","slug":"Wiki and Blog/MiniDoc","date":"2021-11-28T16:00:00.000Z","updated":"2021-11-29T03:11:35.180Z","comments":true,"path":"2021/11/29/Wiki and Blog/MiniDoc/","link":"","permalink":"http://tecnn.github.io/2021/11/29/Wiki%20and%20Blog/MiniDoc/","excerpt":"","text":"MinDoc 是一款针对IT团队开发的简单好用的文档管理系统。 MinDoc 的前身是 SmartWiki 文档系统。SmartWiki 是基于 PHP 框架 laravel 开发的一款文档管理系统。因 PHP 的部署对普通用户来说太复杂，所以改用 Golang 开发。可以方便用户部署和实用，同时增加Markdown和HTML两种编辑器。开发缘起是公司IT部门需要一款简单实用的项目接口文档管理和分享的系统。其功能和界面源于 kancloud 。可以用来储存日常接口文档，数据库字典，手册说明等文档。内置项目管理，用户管理，权限管理等功能，能够满足大部分中小团队的文档管理需求。 安装部署说明only Support CentOS7 or Re7 以服务的方式运行MinDocMinDoc 0.4以上版本支持在Linux和Windows上以服务的方式后台执行，命令如下： 安装服务1./mindoc_linux_amd64 service install 卸载服务1./mindoc_linux_amd64 service remove 执行服务安装后，会创建一个以 mindocd 为服务名的服务。 需要以管理员权限运行 启动服务12systemctl start mindocdsystemctl start enable 使用腾讯免费证书：配置如下：上传证书到指定的文件/opt/confhttp方式端口无法关闭，如果没有指定端口，默认为8080 12345678910111213141516171819//开启HTTPS监听EnableHTTPS = true//HTTPS 监听的IP，默认为空监听所有IPHTTPSAddr=//HTTPS 监听的端口HTTPSPort=443//ssl 证书路径HTTPSCertFile =/opt/conf/XXX.crt//SSL 证书 keyfile 的路径HTTPSKeyFile = /opt/conf/XXX.key MinDoc 备份分为数据库备份和文件备份。mysql 数据库的备份如果你使用的是mysql数据库，可以有以下集中方式来备份你的数据库： mysqldump备份数据库* 在mysql命令行中执行如下命令来备份数据库： 1mysqldump —databases mindoc_db &gt; mindoc_db.sql mysqldump 完整的参数是： 1mysqldump -u USER_NAME -p PASSWORD [其他选项] DB [其他数据库库表] 12345678910111213—default-character-set： 设置字符集—single-transaction : 将导出设置成事务—no-data : 导出的SQL脚本中，将只包含创建表的create 语句。—add-drop-table :导出的脚本中，包含 drop table if exists—routines导出存储过程及函数—events导出事件—triggers 导出触发器 恢复备份 1source mindoc_db.sql sqlite数据库备份因为sqlite是单文件数据库，只需要找到sqlite数据库物理路径，拷贝走就可以了。 mindoc 文件备份将整个mindoc目录打包即可。 恢复先恢复数据库，之后修改conf/app.conf中有变动的地方。启动mindoc即可。","categories":[{"name":"Wiki","slug":"Wiki","permalink":"http://tecnn.github.io/categories/Wiki/"}],"tags":[{"name":"文档管理","slug":"文档管理","permalink":"http://tecnn.github.io/tags/%E6%96%87%E6%A1%A3%E7%AE%A1%E7%90%86/"},{"name":"Wiki","slug":"Wiki","permalink":"http://tecnn.github.io/tags/Wiki/"},{"name":"MiniDoc","slug":"MiniDoc","permalink":"http://tecnn.github.io/tags/MiniDoc/"}],"author":"Kuter Liu"},{"title":"MM_Wiki","slug":"Wiki and Blog/MMWiki","date":"2021-11-28T16:00:00.000Z","updated":"2021-11-29T05:59:56.011Z","comments":true,"path":"2021/11/29/Wiki and Blog/MMWiki/","link":"","permalink":"http://tecnn.github.io/2021/11/29/Wiki%20and%20Blog/MMWiki/","excerpt":"","text":"MM-Wiki 是一个轻量级的企业知识分享与团队协同软件，可用于快速构建企业 Wiki 和团队知识分享平台。部署方便，使用简单，帮助团队构建一个信息共享、文档管理的协作环境。部署简单，支持markdown语法，支持附件上传。具有完善的角色权限管理。档具有分享和下载功能，目前只支持下载 MarkDown 源文件 安装部署Github项目: https://github.com/phachon/mm-wiki说明：安装文件不支持ARM 无法安装，Vbox测试成功 安装mysql以及基本配置1234567891011121314151617• 安装 MariaDByum -y install mariadb-server启动 MariaDB 服务：systemctl start mariadbsystemctl enable mariadb•配置 MariaDB：mysql_secure_installationSet root password? [Y/n] YNew password:Re-enter new password:一路Y•创建用户：mysql&gt; create database mm_wiki_db; # 创建 nextcloud 数据库mysql&gt; grant all on nextcloud.* to ‘nextcloud’@’localhost’ identified by ‘密码’; # 创建 nextcloud 用户并授权mysql&gt; flush privileges; # 刷新权限（将当前 user 和 privilige 表中的用户信息/权限设置从 mysql 库提取到内存中） 安装mm_wiki创建目录123456789101112131415161718192021222324252627282930313233343536373839$ mkdir mm_wiki$ cd mm_wiki安装配置MM_Wiki•下载安装MM_Wikihttps://github.com/phachon/mm-wiki/releases/download/v0.1.9/mm-wiki-v0.1.9-linux-amd64.tar.gz解压到当前目录$ tar -zxvf mm-wiki-linux-amd64.tar.gzcd mm-wiki目录mkdir data 建立数据存放文件夹防火墙开放tcp 8090端口firewall-cmd —list-all 查看防火墙规则firewall-cmd —query-port=8090/tcp 查询8090是否开放firewall-cmd —permanent —add-port=8090/tcp 添加开放tcp8090端口firewall-cmd —reload 重新加载防火墙进入程序安装目录$ cd install执行安装程序，默认端口为 8090，指定其他端口加参数 –port=8087$ ./install （安装完后，[http://ip:8090不可用，如果需要使用，可以ps](http://ip:8090不可用，如果需要使用，可以ps/) 然后kill 相关进程，并且再次运行./install)浏览器访问 [http://ip:8090](http://ip:8090/) 进入安装界面，完成安装配置协议、IP、端口、指定文档数据目录、MySQL数据库配置Ctrl + C 停止 install 程序, 启动 MM-Wiki 系统$ cd ..$ ./mm-wiki —conf conf/mm-wiki.conf &amp; 后台运行Firewall-cmd —query-port=8080/tcp 查询指定访问MM-WIKI的端口是否开放Firewall-cmd —permanent —add-port=8080/tcp 添加允许访问指定的端口Firewall-cmd —reload 重新加载防火墙浏览器访问你监听的 ip 和端口登录 安装NginxNginx是一款高性能的网络服务器，它还可以用作反向代理和缓存服务器，输入下面命令以安装Nginx Web服务器： 1234567891011121314yum install nginx -y默认web目录位置：/usr/share/nginx/html默认安装配置文件位置： /etc/nginx/conf.d/XXX.conf安装完成后，我们可以使用以下命令启动Nginx：systemctl start nginx通过运行以下命令，使Nginx在系统引导时自动启动：systemctl enable nginx现在检查它的状态：systemctl status nginx 正常情况下运行都正常，同时如果出现“Enabled”表示启动时自动启动，上面的命令在运行后不会立即退出，需要按“q”才能退出。 检查Nginx版本： 123nginx -vnginx version: nginx/1.14.0 如果要在本地RHEL 8/CentOS 8计算机上安装LEMP，请在浏览器地址栏中输入127.0.0.1或localhost，应该能看到“欢迎使用Nginx”网页，这意味着Nginx Web服务器正常运行： 默认情况下，RHEL 8/CentOS 8禁止公共访问端口80，要允许其他计算机访问该网页，我们需要在firewalld中打开端口80，运行以下命令以打开端口80： 123456789firewall-cmd —permanent —zone=public —add-service=http如果想稍后在Nginx上启用HTTPS，那么还需要打开端口443：firewall-cmd —permanent —zone=public —add-service=https—permanent选项将使此防火墙规则在系统重新启动后保持不变，接下来，重新加载防火墙守护程序以使更改生效：systemctl reload firewalld 现在可以公开访问Nginx网页了。 最后，我们需要将用户nginx作为web目录的所有者，默认情况下，它由root用户拥有： 1chown nginx:nginx /usr/share/nginx/html -R 如果需要，可用 nginx 配置反向代理1234567891011121314Nginx配置启用https1，查看是否安装了https_ssl_module模块/user/local/nginx/sbin/nginx -V如果出现https_ssl_module则表示已安装2, 申请证书在腾讯云SSL 界面申请免费的DV证书申请好之后需要做TXT的主机记录解析IP下载申请好的证书到Nginx安装目录，默认在/etc/nginx 下面建立SSL文件夹3， 编辑Nginx配置文件vi /etc/nginx/nginx.conf 配置如下：反向代理部分： Https部分： Nginx配置Https其他参考1.首先在Nginx的安装目录下创建cert目录，将下载的全部文件拷贝到cert目录中。2.打开 Nginx 安装目录下 conf 目录中的 nginx.conf 文件，找到“HTTPS server”部分。3.指定证书路径，为如下示意并保存： 123456789101112131415161718192021222324252627282930313233server &#123;listen 443;server_name 你网站的域名;ssl on;root html;index index.html index.htm;ssl_certificate cert/你的证书文件名.pem;ssl_certificate_key cert/你的证书文件名.key;ssl_session_timeout 5m;ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;ssl_protocols TLSv1 TLSv1.1 TLSv1.2;ssl_prefer_server_ciphers on;location / &#123;root html;index index.html index.htm;&#125;&#125; 重启Nginx，这时候你的站点应该就已经可以通过https方式访问了。 更改端口号如果MM_Wiki安装时定义使用的是80端口，现在需要更改监听的端口，操作如下： 1,更改MM_Wiki配置文件listen的端口号 12cd /root/mm-wiki/confvi mm-wiki.conf 2,停止MM_Wiki的服务 1234使用lsof -i:端口号查看服务运行的PIDps aux 或者ps -lekill 9 需要停止的PID号 3，重新启动MM_Wiki服务 12345使用nohub + &amp; 使服务后台运行nohup ./mm-wiki –conf conf/mm-wiki.conf &amp;Apache启用https，前提已经保证apache已经安装完成证书来自腾讯免费SSL证书： 参考：https://cloud.tencent.com/document/product/400/35243 A，安装 mod_ssl使用下面的命令安装 mod_ssl 1dnf install mod_ssl B, 确定 mod_ssl 被启用这一步不是必须的，但是你可以使用下面的命令确定安装的 mod_ssl 已经被启用了。 1apachectl -M | grep ssl （此步操作为成功，报错如下） 正确返回如下： 类似上面的情况和内容，你可用通过上面的返回确定 ssl 已经被启用了 C, 防火墙配置启用9092（默认Https为443，这里更改使用9092端口）要执行下面的命令： 1234firewall-cmd –zone=public –permanent –add-service=httpsfirewall-cmd –zone=public –permanent –add-port=9092/tcpfirewall-cmd –reloadsystemctl restart firewalld D, 配置SSL证书：首次安装的 Apache 服务器，conf.d、conf、conf.modules.d 等目录默认在 /etc/httpd 目录下 从腾讯下载申请好的证书，然后将apache的三个张数上传到：/etc/httpd/ssl,如果没有ssl可以mkdir建立 12cd /etc/httpd/mkdir ssl a，配置httpd.conf开启支持SSL 12cd /etc/httpd/conf/httpd.conf找到 Include conf.modules.d/*.conf(此项用于加载配置SSL目录)，确保此项没有被注释 b，配置conf.modules.d 1234cd /etc/httpd/conf.modules.d编辑00-ssl.conf 配置文件找到 LoadModule ssl_module modules/mod_ssl.so（用于加载 SSL 模块）配置语句，并确认该配置语句未被注释，若已注释，请去掉首行的注释符号（#）保存配置文件 c，配置ssl.conf开启ssl 123456789101112131415161718192021cd /etc/httpd/conf.d编辑ssl.confDocumentRoot “ /root/mm-wiki”ServerName 127.0.0.1:443ServerAdmin [you@example.com](mailto:you@example.com)ErrorLog “/etc/httpd/logs/error_log”TransferLog “/etc/httpd/logs/access_log”SSLEngine onSSLCertificateFile “/etc/httpd/ssl/Apache/XXX.crt “SSLCertificateKeyFile “/etc/httpd/ssl/Apache/XXX.key”SSLCertificateChainFile “/etc/httpd/ssl/Apache/XXX.crt”重启apache后即可使用[https://ip](https://ip/) 访问E，配置http自动跳转https a，配置httpd.conf开启rewrite特性 12确认配置文件是否存在LoadModule rewrite_module modules/mod_rewrite.so （如果有注释，需要取消） b，配置rewrite 123cd /etc/httpd/conf/httpd.conf 配置https123456789101112131415161718192021222324RewriteEngine onRewriteCond %&#123;SERVER_PORT&#125; !^443$RewriteRule ^(.*)?$ [https://%&#123;SERVER_NAME&#125;%&#123;REQUEST_URI&#125;](https://%&#123;server_name&#125;%&#123;request_uri&#125;/) [L,R]参考MM_WikiF，配置域名修改/etc/httpd/conf.d/ssl.conf 和 /etc/httpd/conf/httpd.confhttpd.conf如下：ssl.conf如下：G，更改https默认443端口号本例以配置Nextcloud为例：cd /etc/httpd/conf.d/vi ssl.conf更改如下：默认http 80更改如下（好像不需要）：本例以配置Nextcloud为例：cd /etc/httpd/conf/vi httpd.confH，配置SELinux,运行TCP9092通过","categories":[{"name":"Wiki","slug":"Wiki","permalink":"http://tecnn.github.io/categories/Wiki/"}],"tags":[{"name":"文档管理","slug":"文档管理","permalink":"http://tecnn.github.io/tags/%E6%96%87%E6%A1%A3%E7%AE%A1%E7%90%86/"},{"name":"Wiki","slug":"Wiki","permalink":"http://tecnn.github.io/tags/Wiki/"},{"name":"MM_Wiki","slug":"MM-Wiki","permalink":"http://tecnn.github.io/tags/MM-Wiki/"}],"author":"Kuter Liu"},{"title":"C语言系列（一）","slug":"C语言/C语言基础","date":"2021-11-28T16:00:00.000Z","updated":"2021-11-29T05:50:45.110Z","comments":true,"path":"2021/11/29/C语言/C语言基础/","link":"","permalink":"http://tecnn.github.io/2021/11/29/C%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/","excerpt":"","text":"","categories":[{"name":"C programming","slug":"C-programming","permalink":"http://tecnn.github.io/categories/C-programming/"}],"tags":[{"name":"C","slug":"C","permalink":"http://tecnn.github.io/tags/C/"},{"name":"C语言","slug":"C语言","permalink":"http://tecnn.github.io/tags/C%E8%AF%AD%E8%A8%80/"},{"name":"编程","slug":"编程","permalink":"http://tecnn.github.io/tags/%E7%BC%96%E7%A8%8B/"},{"name":"C Programming","slug":"C-Programming","permalink":"http://tecnn.github.io/tags/C-Programming/"},{"name":"程序涉及","slug":"程序涉及","permalink":"http://tecnn.github.io/tags/%E7%A8%8B%E5%BA%8F%E6%B6%89%E5%8F%8A/"}],"author":"Kuter Liu"},{"title":"Seafile 安装脚本（转载）","slug":"私有云/Seafile 安装脚本","date":"2021-11-15T16:00:00.000Z","updated":"2021-11-29T03:15:09.726Z","comments":true,"path":"2021/11/16/私有云/Seafile 安装脚本/","link":"","permalink":"http://tecnn.github.io/2021/11/16/%E7%A7%81%E6%9C%89%E4%BA%91/Seafile%20%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC/","excerpt":"","text":"Seafile 是一款开源的企业云盘，注重可靠性和性能。支持 Windows, Mac, Linux, iOS, Android 平台。支持文件同步或者直接挂载到本地访问，除了一般网盘所提供的云存储以及共享功能外，Seafile还提供消息通信、群组讨论等辅助功能，帮助更好的围绕文件展开协同工作。 安装脚本一键安装脚本可以帮助您在 Ubuntu 18.04/20.04 系统上快速的安装好 Seafile 服务器，并配置好 MariaDB, Memcached, WebDAV, Ngnix 和开机自动启动脚本。 使用步骤安装干净的 Ubuntu 18.04/20.04，并做好镜像 (如果安装失败需要还原到镜像)。 切换成 root 账号 (sudo -i) 获取安装脚本适用于 Seafile 8.0.x 及以上版本 cd /opt wget https://seafile-downloads.oss-cn-shanghai.aliyuncs.com/seafile-server_8.0.7_x86-64.tar.gz 12wget https://raw.githubusercontent.com/haiwen/seafile-server-installer-cn/master/seafile-8.0_ubuntu 运行安装脚本并指定要安装的版本 (例如 8.0.0)12bash seafile-8.0_ubuntu 8.0.7 脚本会让您选择要安装的版本, 按照提示进行选择即可: 如果要安装专业版, 需要先将下载好的专业版的包 seafile-pro-server_8.0.0_x86-64.tar.gz 放到 /opt/ 目录下 如果是安装开源版，安装脚本在执行过程中会检查 /opt目录下是否有指定版本号的安装包，如果存在则会安装此包，否则会从 Seafile 网站下载。所以，为了避免因下载失败而导致安装中断，您可以提前下载好安装包放到/opt/目录下。 该脚本运行完后会在命令行中打印配置信息和管理员账号密码，请仔细阅读。(您也可以查看安装日志/opt/seafile/aio_seafile-server.log)，MySQL 的 root 用户密码存储在 /root/.my.cnf 中；MySQL 的 seafile 用户密码存储在 /opt/seafile.my.cnf 中。 通过 Web UI 对服务器进行配置安装完成后，您需要通过 Web UI 服务器进行基本的配置，以便能正常的从网页端进行文件的上传和下载： 首先在浏览器中输入服务器的地址，并用管理员账号和初始密码登录 点击界面的右上角的头像按钮进入管理员界面 进入设置页面填写正确的服务器对外的 SERVICE_URL 和 FILE_SERVER_ROOT，比如 123SERVICE_URL: http://www.your-domain.comFILE_SERVER_ROOT: http://www.your-domain.com/seafhttp 现在您可以退出管理员界面，并进行基本的测试。关于服务器的配置选项介绍和日常运维可以参考 https://cloud.seafile.com/published/seafile-manual-cn/config/README.md 如果安装脚本出错如果安装脚本出错，您需要重置虚拟机到干净的镜像。 启动关闭服务自动安装脚本会在系统中安装开机自动启动脚本。您也可以使用该脚本来关闭/启动 Seafile 服务，命令如下： 123service seafile-server stopservice seafile-server start 启用HTTPS上传证书到/etc/ssl/下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970log_format seafileformat &#x27;$http_x_forwarded_for $remote_addr [$time_local] &quot;$request&quot; $status $body_bytes_sent &quot;$http_referer&quot; &quot;$http_user_agent&quot; $upstream_response_time&#x27;;server &#123; listen 80; server_name tecnn.cn; rewrite ^ https://$http_host$request_uri? permanent; server_tokens off;&#125;server &#123; listen 443 ssl http2; ssl_certificate /etc/ssl/www.tecnn.cn.pem; ssl_certificate_key /etc/ssl/www.tecnn.cn.key; server_name tecnn.cn; ssl_session_timeout 5m; ssl_session_cache shared:SSL:5m; ssl_prefer_server_ciphers on; proxy_set_header X-Forwarded-For $remote_addr; # add_header Strict-Transport-Security “max-age=31536000; includeSubDomains”; server_tokens off; location / &#123; proxy_pass http://127.0.0.1:8000; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $server_name; proxy_set_header X-Forwarded-Proto $scheme; proxy_read_timeout 1200s; # used for view/edit office file via Office Online Server client_max_body_size 0; access_log /var/log/nginx/seahub.access.log seafileformat; error_log /var/log/nginx/seahub.error.log; &#125; location /seafhttp &#123; rewrite ^/seafhttp(.*)$ $1 break; proxy_pass http://127.0.0.1:8082; client_max_body_size 0; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_connect_timeout 36000s; proxy_read_timeout 36000s; access_log /var/log/nginx/seafhttp.access.log seafileformat; error_log /var/log/nginx/seafhttp.error.log; &#125; location /media &#123; root /opt/seafile/seafile-server-latest/seahub; &#125; location /seafdav &#123; proxy_pass http://127.0.0.1:8080/seafdav; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Host $server_name; proxy_set_header X-Forwarded-Proto $scheme; proxy_read_timeout 1200s; client_max_body_size 0; access_log /var/log/nginx/seafdav.access.log seafileformat; error_log /var/log/nginx/seafdav.error.log; &#125;&#125; UFW 防火墙配置123456789101112131415161718192021222324252627282930313233ufw status ---查看防火墙状态Usage: ufw COMMANDCommands: enable enables the firewall disable disables the firewall default ARG set default policy logging LEVEL set logging to LEVEL allow ARGS add allow rule deny ARGS add deny rule reject ARGS add reject rule limit ARGS add limit rule delete RULE|NUM delete RULE insert NUM RULE insert RULE at NUM route RULE add route RULE route delete RULE|NUM delete route RULE route insert NUM RULE insert route RULE at NUM reload reload firewall reset reset firewall status show firewall status status numbered show firewall status as numbered list of RULES status verbose show verbose firewall status show ARG show firewall report version display version informationApplication profile commands: app list list application profiles app info PROFILE show information on PROFILE app update PROFILE update PROFILE app default ARG set default application policy","categories":[{"name":"Seafil Cloud","slug":"Seafil-Cloud","permalink":"http://tecnn.github.io/categories/Seafil-Cloud/"}],"tags":[{"name":"Seafile","slug":"Seafile","permalink":"http://tecnn.github.io/tags/Seafile/"}],"author":"Kuter Liu"}],"categories":[{"name":"Cisco","slug":"Cisco","permalink":"http://tecnn.github.io/categories/Cisco/"},{"name":"blog","slug":"blog","permalink":"http://tecnn.github.io/categories/blog/"},{"name":"Wiki","slug":"Wiki","permalink":"http://tecnn.github.io/categories/Wiki/"},{"name":"C programming","slug":"C-programming","permalink":"http://tecnn.github.io/categories/C-programming/"},{"name":"Seafil Cloud","slug":"Seafil-Cloud","permalink":"http://tecnn.github.io/categories/Seafil-Cloud/"}],"tags":[{"name":"Cisco","slug":"Cisco","permalink":"http://tecnn.github.io/tags/Cisco/"},{"name":"Vlan","slug":"Vlan","permalink":"http://tecnn.github.io/tags/Vlan/"},{"name":"思科","slug":"思科","permalink":"http://tecnn.github.io/tags/%E6%80%9D%E7%A7%91/"},{"name":"路由器","slug":"路由器","permalink":"http://tecnn.github.io/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"},{"name":"交换机","slug":"交换机","permalink":"http://tecnn.github.io/tags/%E4%BA%A4%E6%8D%A2%E6%9C%BA/"},{"name":"blog","slug":"blog","permalink":"http://tecnn.github.io/tags/blog/"},{"name":"博客","slug":"博客","permalink":"http://tecnn.github.io/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"文档","slug":"文档","permalink":"http://tecnn.github.io/tags/%E6%96%87%E6%A1%A3/"},{"name":"BookStack","slug":"BookStack","permalink":"http://tecnn.github.io/tags/BookStack/"},{"name":"文档管理","slug":"文档管理","permalink":"http://tecnn.github.io/tags/%E6%96%87%E6%A1%A3%E7%AE%A1%E7%90%86/"},{"name":"Wiki","slug":"Wiki","permalink":"http://tecnn.github.io/tags/Wiki/"},{"name":"Docsify","slug":"Docsify","permalink":"http://tecnn.github.io/tags/Docsify/"},{"name":"Doku","slug":"Doku","permalink":"http://tecnn.github.io/tags/Doku/"},{"name":"Hexo","slug":"Hexo","permalink":"http://tecnn.github.io/tags/Hexo/"},{"name":"MiniDoc","slug":"MiniDoc","permalink":"http://tecnn.github.io/tags/MiniDoc/"},{"name":"MM_Wiki","slug":"MM-Wiki","permalink":"http://tecnn.github.io/tags/MM-Wiki/"},{"name":"C","slug":"C","permalink":"http://tecnn.github.io/tags/C/"},{"name":"C语言","slug":"C语言","permalink":"http://tecnn.github.io/tags/C%E8%AF%AD%E8%A8%80/"},{"name":"编程","slug":"编程","permalink":"http://tecnn.github.io/tags/%E7%BC%96%E7%A8%8B/"},{"name":"C Programming","slug":"C-Programming","permalink":"http://tecnn.github.io/tags/C-Programming/"},{"name":"程序涉及","slug":"程序涉及","permalink":"http://tecnn.github.io/tags/%E7%A8%8B%E5%BA%8F%E6%B6%89%E5%8F%8A/"},{"name":"Seafile","slug":"Seafile","permalink":"http://tecnn.github.io/tags/Seafile/"}]}